<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>TCP释放连接</title>
    <url>/2021/10/11/TCP%E9%87%8A%E6%94%BE%E8%BF%9E%E6%8E%A5/</url>
    <content><![CDATA[<h1 id="TCP连接释放"><a href="#TCP连接释放" class="headerlink" title="TCP连接释放"></a>TCP连接释放</h1><h3 id="4次挥手-关闭连接"><a href="#4次挥手-关闭连接" class="headerlink" title="4次挥手 关闭连接"></a>4次挥手 关闭连接</h3><blockquote>
<p>为什么释放连接的时候，要进行4次挥手?</p>
</blockquote>
<span id="more"></span>

<h3 id="TCP是全双工模式"><a href="#TCP是全双工模式" class="headerlink" title="TCP是全双工模式."></a>TCP是全双工模式.</h3><ul>
<li>第一次挥手: 当<strong>主机1</strong>发出<strong>FIN</strong>报文段时<ul>
<li>表示<strong>主机1</strong>告诉<strong>主机2</strong>, 主机1已经没有数据要发送了, 但是, 此时<strong>主机1</strong>还是可以接受来自<strong>主机2</strong>的数据.</li>
</ul>
</li>
<li>第二次挥手: 当<strong>主机2</strong>返回ACK报文段时<ul>
<li>表示<strong>主机2</strong>已经知道<strong>主机1</strong>没有数据发送了，但是<strong>主机2</strong>还是可以发送数据到<strong>主机1</strong>的</li>
</ul>
</li>
<li>第三次挥手: 当<strong>主机2</strong>也发送了FIN报文段时<ul>
<li>表示<strong>主机2</strong>告诉<strong>主机1</strong>， <strong>主机2</strong>已经没有数据要发送了</li>
</ul>
</li>
<li>第四次挥手: 当<strong>主机1</strong>返回ACK报文段时<ul>
<li>表示<strong>主机1</strong>已经知道<strong>主机2</strong>没有数据发送了, 随后正式断开整个TCP连接.  </li>
</ul>
</li>
</ul>
<blockquote>
<p>TCP/IP协议栈允许接收方和发送方任意一方都可以主动发送断开连接的请求.</p>
</blockquote>
<ul>
<li><strong>clien</strong>发送ACK后, 需要有个<strong>TIME-WAIT</strong>阶段, 等待一段时间后, 再真正关闭连接.</li>
</ul>
<p><img src="https://s2.loli.net/2021/12/11/q4OjcxgCykJ6ALh.png" title="TCP断开连接过程示意图"></p>
]]></content>
      <categories>
        <category>网络</category>
        <category>TCP协议</category>
      </categories>
      <tags>
        <tag>网络 传输层 TCP</tag>
      </tags>
  </entry>
  <entry>
    <title>runtime源码解读(1)</title>
    <url>/2021/12/01/runtime%E5%BA%95%E5%B1%82%E6%8E%A2%E7%A9%B6/</url>
    <content><![CDATA[<blockquote>
<p>runtime</p>
</blockquote>
<ul>
<li>消息发送</li>
<li>动态解析</li>
<li>消息转发</li>
</ul>
<span id="more"></span>

<p><a href="https://blog.mrzorg.top/categories/Hexo/">参考链接1</a></p>
<p><a href="https://tding.top/tags/">参考链接2</a></p>
<p><a href="http://yearito.cn/posts/hexo-writing-skills.html">参考链接3</a></p>
<p><a href="http://yearito.cn/posts/hexo-theme-beautify.html">参考链接4</a></p>
<!-- more -->

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">calendar:</span><br><span class="line">  calendar_id: &lt;required&gt; # Your Google account E-Mail</span><br><span class="line">  api_key: &lt;required&gt;</span><br><span class="line">  orderBy: startTime</span><br><span class="line">  offsetMax: <span class="number">24</span> # Time Range</span><br><span class="line">  offsetMin: <span class="number">4</span> # Time Range</span><br><span class="line">  showDeleted: <span class="literal">false</span></span><br><span class="line">  singleEvents: <span class="literal">true</span></span><br><span class="line">  maxResults: <span class="number">250</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Objective-C</category>
        <category>runtime</category>
      </categories>
      <tags>
        <tag>runtime c</tag>
      </tags>
  </entry>
  <entry>
    <title>应用层协议探究</title>
    <url>/2021/09/11/%E5%BA%94%E7%94%A8%E5%B1%82%E6%8E%A2%E7%A9%B6/</url>
    <content><![CDATA[<h1 id="应用层常见协议"><a href="#应用层常见协议" class="headerlink" title="应用层常见协议"></a>应用层常见协议</h1><div class="note info">
            <p>应用层（英语：Application layer）位于OSI模型的第七层。应用层直接和应用程序接口结合，并提供常见的网络应用服务。应用层也向第六层表示层发出请求。</p>
          </div>

<span id="more"></span>

<blockquote>
<p>网络互联模型</p>
</blockquote>
<p><img src="https://s2.loli.net/2021/12/11/7h5OCdfR9HMEnZl.png" title="网络分层模型示意图"></p>
<h2 id="超文本传输"><a href="#超文本传输" class="headerlink" title="超文本传输"></a>超文本传输</h2><ul>
<li>HTTP, HTTPS</li>
</ul>
<h2 id="文件传输"><a href="#文件传输" class="headerlink" title="文件传输"></a>文件传输</h2><ul>
<li>FTP</li>
</ul>
<h2 id="电子邮件"><a href="#电子邮件" class="headerlink" title="电子邮件"></a>电子邮件</h2><ul>
<li>SMTP, POP3, IMAP</li>
</ul>
<h2 id="动态主机配置"><a href="#动态主机配置" class="headerlink" title="动态主机配置"></a>动态主机配置</h2><p><a href="https://zh.wikipedia.org/wiki/HDCP">DHCP</a></p>
<blockquote>
<p>动态主机配置协议: 指的是由服务器控制一段IP地址范围，客户机登录服务器时就可以自动获得服务器分配的IP地址和子网掩码</p>
</blockquote>
<ul>
<li><p>静态<code>IP</code>地址</p>
<ul>
<li>手动配置</li>
<li>适用场景: 不怎么挪动的台式机, 服务器等</li>
</ul>
</li>
<li><p>动态<code>IP</code>地址</p>
<ul>
<li>从<code>DHCP</code>服务器自动获取<code>IP</code>地址    </li>
<li>适用场景: 移动设备, 无线设备等.</li>
</ul>
</li>
<li><p><code>DHCP</code>协议基于<code>UDP</code>协议, 客户端是68端口, 服务器是67端口.</p>
</li>
</ul>
<h3 id="分配IP地址的4个阶段"><a href="#分配IP地址的4个阶段" class="headerlink" title="分配IP地址的4个阶段"></a>分配IP地址的4个阶段</h3><ul>
<li>DISCOVER: 发现服务器<ul>
<li>发广播报 </li>
</ul>
</li>
<li>OFFER: 提供租约<ul>
<li>服务器返回可以租用的<code>IP</code>地址，以及租用期限，子网掩码，网关，DNS等信息. </li>
</ul>
</li>
<li>REQUEST: 选择IP地址<ul>
<li>客户端选择一个<code>OFFER</code>, 发送广播包进行回应. </li>
</ul>
</li>
<li>ACKNOWLEDGE: 确认<ul>
<li>被选中的服务器发送<code>ACK</code>数据包给客户端.</li>
</ul>
</li>
</ul>
<p><img src="https://s2.loli.net/2021/12/11/hpFMyJU34bqstdn.png" title="分配ip地址"></p>
<h2 id="域名系统"><a href="#域名系统" class="headerlink" title="域名系统"></a>域名系统</h2><h3 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h3><p><code>Domain Name System</code></p>
<blockquote>
<p>利用DNS, 可以将域名解析成对应的IP地址.</p>
</blockquote>
<blockquote>
<p>DNS可以基于UDP协议，也可以基于TCP协议, 服务器占用53端口.</p>
</blockquote>
]]></content>
      <categories>
        <category>网络</category>
        <category>应用层</category>
      </categories>
      <tags>
        <tag>网络 应用层</tag>
      </tags>
  </entry>
</search>
