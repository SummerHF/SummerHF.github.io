<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>TCP释放连接</title>
    <url>/2021/10/11/TCP%E9%87%8A%E6%94%BE%E8%BF%9E%E6%8E%A5/</url>
    <content><![CDATA[<h1 id="TCP连接释放"><a href="#TCP连接释放" class="headerlink" title="TCP连接释放"></a>TCP连接释放</h1><h3 id="4次挥手-关闭连接"><a href="#4次挥手-关闭连接" class="headerlink" title="4次挥手 关闭连接"></a>4次挥手 关闭连接</h3><blockquote>
<p>为什么释放连接的时候，要进行4次挥手?</p>
</blockquote>
<span id="more"></span>

<h3 id="TCP是全双工模式"><a href="#TCP是全双工模式" class="headerlink" title="TCP是全双工模式."></a>TCP是全双工模式.</h3><ul>
<li>第一次挥手: 当<strong>主机1</strong>发出<strong>FIN</strong>报文段时<ul>
<li>表示<strong>主机1</strong>告诉<strong>主机2</strong>, 主机1已经没有数据要发送了, 但是, 此时<strong>主机1</strong>还是可以接受来自<strong>主机2</strong>的数据.</li>
</ul>
</li>
<li>第二次挥手: 当<strong>主机2</strong>返回ACK报文段时<ul>
<li>表示<strong>主机2</strong>已经知道<strong>主机1</strong>没有数据发送了，但是<strong>主机2</strong>还是可以发送数据到<strong>主机1</strong>的</li>
</ul>
</li>
<li>第三次挥手: 当<strong>主机2</strong>也发送了FIN报文段时<ul>
<li>表示<strong>主机2</strong>告诉<strong>主机1</strong>， <strong>主机2</strong>已经没有数据要发送了</li>
</ul>
</li>
<li>第四次挥手: 当<strong>主机1</strong>返回ACK报文段时<ul>
<li>表示<strong>主机1</strong>已经知道<strong>主机2</strong>没有数据发送了, 随后正式断开整个TCP连接.  </li>
</ul>
</li>
</ul>
<blockquote>
<p>TCP/IP协议栈允许接收方和发送方任意一方都可以主动发送断开连接的请求.</p>
</blockquote>
<ul>
<li><strong>clien</strong>发送ACK后, 需要有个<strong>TIME-WAIT</strong>阶段, 等待一段时间后, 再真正关闭连接.</li>
</ul>
<p><img src="https://s2.loli.net/2021/12/11/q4OjcxgCykJ6ALh.png" title="TCP断开连接过程示意图"></p>
]]></content>
      <categories>
        <category>网络</category>
        <category>TCP协议</category>
      </categories>
      <tags>
        <tag>网络 传输层 TCP</tag>
      </tags>
  </entry>
  <entry>
    <title>runtime源码解读(1)</title>
    <url>/2021/12/01/runtime%E5%BA%95%E5%B1%82%E6%8E%A2%E7%A9%B6/</url>
    <content><![CDATA[<blockquote>
<p>runtime</p>
</blockquote>
<ul>
<li>消息发送</li>
<li>动态解析</li>
<li>消息转发</li>
</ul>
<span id="more"></span>

<p><a href="https://blog.mrzorg.top/categories/Hexo/">参考链接1</a></p>
<p><a href="https://tding.top/tags/">参考链接2</a></p>
<p><a href="http://yearito.cn/posts/hexo-writing-skills.html">参考链接3</a></p>
<p><a href="http://yearito.cn/posts/hexo-theme-beautify.html">参考链接4</a></p>
<!-- more -->

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">calendar:</span><br><span class="line">  calendar_id: &lt;required&gt; # Your Google account E-Mail</span><br><span class="line">  api_key: &lt;required&gt;</span><br><span class="line">  orderBy: startTime</span><br><span class="line">  offsetMax: <span class="number">24</span> # Time Range</span><br><span class="line">  offsetMin: <span class="number">4</span> # Time Range</span><br><span class="line">  showDeleted: <span class="literal">false</span></span><br><span class="line">  singleEvents: <span class="literal">true</span></span><br><span class="line">  maxResults: <span class="number">250</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Objective-C</category>
        <category>runtime</category>
      </categories>
      <tags>
        <tag>runtime c</tag>
      </tags>
  </entry>
  <entry>
    <title>应用层协议探究</title>
    <url>/2021/09/11/%E5%BA%94%E7%94%A8%E5%B1%82%E6%8E%A2%E7%A9%B6/</url>
    <content><![CDATA[<h1 id="应用层常见协议"><a href="#应用层常见协议" class="headerlink" title="应用层常见协议"></a>应用层常见协议</h1><p>应用层（英语：Application layer）位于OSI模型的第七层。应用层直接和应用程序接口结合，并提供常见的网络应用服务。应用层也向第六层表示层发出请求。</p>
<span id="more"></span>

<blockquote>
<p>网络互联模型</p>
</blockquote>
<p><img src="https://s2.loli.net/2021/12/11/7h5OCdfR9HMEnZl.png" title="网络分层模型示意图"></p>
<h2 id="超文本传输"><a href="#超文本传输" class="headerlink" title="超文本传输"></a>超文本传输</h2><p><a href="https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE">HTTP</a>是一个客户端（用户）和服务端（网站）之间请求和应答的标准，通常使用TCP协议.</p>
<h3 id="报文格式"><a href="#报文格式" class="headerlink" title="报文格式"></a>报文格式</h3><p><img src="https://s2.loli.net/2021/12/11/kRwtOagl4Ids7Kb.png" title="报文格式 "></p>
<p><code>ABNF</code>是最严谨的<code>HTTP</code>报文格式描述形式, 如下所示: </p>
<figure class="highlight abnf"><figcaption><span>ABNF实例</span><a href="https://datatracker.ietf.org/doc/html/rfc7230#section-3">RFC</a></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attribute">HTTP-message</span>   = start-line</span><br><span class="line">                      *( header-field <span class="keyword">CRLF</span> )</span><br><span class="line">                      <span class="keyword">CRLF</span></span><br><span class="line">                      [ message-body ]</span><br></pre></td></tr></table></figure>
<blockquote>
<p>示例图</p>
</blockquote>
<p><img src="https://s2.loli.net/2021/12/11/DvURQt42qjCdISn.png"></p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">start-line</span>     = request-line / status-line</span><br><span class="line"><span class="attribute">request-line</span>   = method <span class="keyword">SP</span> request-target <span class="keyword">SP</span> HTTP-version <span class="keyword">CRLF</span></span><br><span class="line"><span class="attribute">status-line</span> = HTTP-version <span class="keyword">SP</span> status-code <span class="keyword">SP</span> reason-phrase <span class="keyword">CRLF</span> </span><br><span class="line"><span class="attribute">reason-phrase</span>  = *( <span class="keyword">HTAB</span> / <span class="keyword">SP</span> / <span class="keyword">VCHAR</span> / obs-text )</span><br></pre></td></tr></table></figure>

<blockquote>
<p>报文格式</p>
</blockquote>
<p><img src="https://s2.loli.net/2021/12/11/OQIKA8q6n1YujS3.png"></p>
<blockquote>
<p>Rules</p>
</blockquote>
<p><img src="https://s2.loli.net/2021/12/11/xMy74RfGjoKiz8N.png"></p>
<h3 id="URL的编码"><a href="#URL的编码" class="headerlink" title="URL的编码"></a>URL的编码</h3><p><code>URL</code>中一旦出现了一些特殊字符(比如中文，空格)，需要进行<a href="https://zh.wikipedia.org/wiki/%E7%BC%96%E7%A0%81">编码</a>. 在浏览器的地址栏输入<code>URL</code>时, 采用<code>URF-8</code>进行编码.</p>
<h3 id="请求方法"><a href="#请求方法" class="headerlink" title="请求方法"></a>请求方法</h3><ul>
<li><p><code>GET</code>: 请求向指定的资源发出“显示”请求。使用<code>GET</code>方法应该只用在读取资料，而不应当被用于产生“副作用”的操作中，例如在网络应用程序中。其中一个原因是<code>GET</code>可能会被网络爬虫等随意访问。浏览器直接发出的<code>GET</code>只能由一个url触发。<code>GET</code>上要在<code>url</code>之外带一些参数就只能依靠<code>url</code>上附带<code>querystring</code>。<code>GET</code>请求<code>URI</code>有长度限制，所以如果请求参数过多，还是需要适用<code>POST</code>请求.</p>
</li>
<li><p><code>POST</code>: 常用于添加，修改，删除的操作, 请求参数可以放到请求体中(没有大小限制)</p>
</li>
<li><p><code>HEAD</code>: 请求得到与<code>GET</code>请求相同的相应, 但没有响应体.</p>
<ul>
<li>使用场景举例：在下载一个大文件前，先获取其大小，再决定是否要下载. 以此可以节约带宽资源.</li>
</ul>
</li>
<li><p><code>OPTIONS</code>: 用于获取目标资源所支持的通信选项， 比如服务器支持的请求方法.</p>
<ul>
<li> <code>OPTIONS * HTTP/1.1 </code></li>
</ul>
</li>
<li><p><code>PUT</code>: 用于对已存在的资源进行整体覆盖.</p>
</li>
<li><p><code>PATCH</code>: 用于对资源进行部分修改(资源不存在, 会创建新的资源).</p>
</li>
<li><p><code>DELETE</code>: 用于删除指定的资源.</p>
</li>
<li><p><code>TRACE</code>: 请求服务器回显其他的请求信息, 主要用于<code>HTTP</code>请求的测试或诊断.</p>
</li>
<li><p><code>CONNECT</code>: 可以开启一个客户端与所请求资源之间的双向沟通的通道, 它可以用来创建隧道<code>tunnel</code>, 可以用来访问采用了<code>SSL(HTTPS)</code>协议的站点.</p>
</li>
</ul>
<h3 id="请求头字段"><a href="#请求头字段" class="headerlink" title="请求头字段"></a>请求头字段</h3><table>
<thead>
<tr>
<th>头字段名</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>User-Agent</td>
<td>浏览器的身份标识字符串</td>
<td>Mozilla/5.0</td>
</tr>
<tr>
<td>Host</td>
<td>服务器的域名以及端口号</td>
<td>localhost:80</td>
</tr>
<tr>
<td>Date</td>
<td>发送该消息的日期和时间</td>
<td>Sat, 11 Dec 2021 15:25:46 GMT0</td>
</tr>
<tr>
<td>Referer</td>
<td>表示浏览器所访问的前一个页面, 正是那个页面上的某个链接将浏览器带到了当前所请求的这个页面</td>
<td><code>https://zh.wikipedia.org/</code></td>
</tr>
<tr>
<td>Content-Type</td>
<td>请求体的类型</td>
<td><code>text/html; charset=UTF-8</code></td>
</tr>
<tr>
<td>Content-Length</td>
<td>请求体的长度(字节为单位)</td>
<td>100</td>
</tr>
<tr>
<td>Accept</td>
<td>能够接受的响应内容类型</td>
<td><code>text/ plain</code></td>
</tr>
<tr>
<td>Accept-Charset</td>
<td>能够接受的字符集</td>
<td><code>Accept-Charset: GB2312, utf-8;q=0.7(权重)</code></td>
</tr>
<tr>
<td>Accept-Encoding</td>
<td>能够接受编码方式列表</td>
<td><code>gzip</code></td>
</tr>
<tr>
<td>Range</td>
<td>仅请求某个实体的一部分，字节偏移以0开始(应用: 断点下载)</td>
<td>bytes=500-999</td>
</tr>
<tr>
<td>Origin</td>
<td>发起一个针对跨域资源共享的请求</td>
<td><code>https://zh.wikipedia.org/</code></td>
</tr>
<tr>
<td>Cookie</td>
<td>之前由服务器通过Set-Cookie发送的Cookie</td>
<td><code>$version=1</code></td>
</tr>
<tr>
<td>Cache-Control</td>
<td>用来指定在这次的请求/响应链中的所有缓存机制都必须遵守的指令</td>
<td><code>no-cache</code></td>
</tr>
</tbody></table>
<h3 id="响应头字段"><a href="#响应头字段" class="headerlink" title="响应头字段"></a>响应头字段</h3><table>
<thead>
<tr>
<th>头字段名</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>Content-Type</td>
<td>响应体的类型</td>
<td>text/html</td>
</tr>
<tr>
<td>Content-Encoding</td>
<td>内容所使用的编码类型</td>
<td>gzip</td>
</tr>
<tr>
<td>Content-Length</td>
<td>响应体的长度(字节为单位)</td>
<td>100</td>
</tr>
<tr>
<td>Content-Disposition</td>
<td>一个可以让客户端下载文件并建议文件名的头部</td>
<td><code>attachment; filename=&quot;fname.txt&quot;</code></td>
</tr>
<tr>
<td>Accept-Ranges</td>
<td>服务器支持那些种类的部分内容范围</td>
<td><code>bytes</code></td>
</tr>
<tr>
<td>Content-Range</td>
<td>这条消息是属于完整消息的那部分</td>
<td><code>Content-Range: bytes 21010-323/4343</code></td>
</tr>
</tbody></table>
<h3 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h3><p>状态码指示<code>HTTP</code>请求是否已完成.<br>状态码可以分为5类</p>
<ul>
<li>消息响应: 100~199</li>
<li>成功响应: 200~299</li>
<li>重定向: 300~399</li>
<li>客户端错误: 400-499<ul>
<li>405： 服务器禁止了使用当前的<code>HTTP</code>方法请求 </li>
</ul>
</li>
<li>服务端错误： 500-599</li>
</ul>
<h3 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h3><h2 id="文件传输"><a href="#文件传输" class="headerlink" title="文件传输"></a>文件传输</h2><ul>
<li>FTP</li>
</ul>
<h2 id="电子邮件"><a href="#电子邮件" class="headerlink" title="电子邮件"></a>电子邮件</h2><ul>
<li>SMTP, POP3, IMAP</li>
</ul>
<h2 id="动态主机配置"><a href="#动态主机配置" class="headerlink" title="动态主机配置"></a>动态主机配置</h2><p><a href="https://zh.wikipedia.org/wiki/HDCP">DHCP</a></p>
<blockquote>
<p>动态主机配置协议: 指的是由服务器控制一段IP地址范围，客户机登录服务器时就可以自动获得服务器分配的IP地址和子网掩码</p>
</blockquote>
<ul>
<li><p>静态<code>IP</code>地址</p>
<ul>
<li>手动配置</li>
<li>适用场景: 不怎么挪动的台式机, 服务器等</li>
</ul>
</li>
<li><p>动态<code>IP</code>地址</p>
<ul>
<li>从<code>DHCP</code>服务器自动获取<code>IP</code>地址    </li>
<li>适用场景: 移动设备, 无线设备等.</li>
</ul>
</li>
<li><p><code>DHCP</code>协议基于<code>UDP</code>协议, 客户端是68端口, 服务器是67端口.</p>
</li>
</ul>
<h3 id="分配IP地址的4个阶段"><a href="#分配IP地址的4个阶段" class="headerlink" title="分配IP地址的4个阶段"></a>分配IP地址的4个阶段</h3><ul>
<li>DISCOVER: 发现服务器<ul>
<li>发广播报 </li>
</ul>
</li>
<li>OFFER: 提供租约<ul>
<li>服务器返回可以租用的<code>IP</code>地址，以及租用期限，子网掩码，网关，DNS等信息. </li>
</ul>
</li>
<li>REQUEST: 选择IP地址<ul>
<li>客户端选择一个<code>OFFER</code>, 发送广播包进行回应. </li>
</ul>
</li>
<li>ACKNOWLEDGE: 确认<ul>
<li>被选中的服务器发送<code>ACK</code>数据包给客户端.</li>
</ul>
</li>
</ul>
<p><img src="https://s2.loli.net/2021/12/11/hpFMyJU34bqstdn.png" title="分配ip地址"></p>
<h2 id="域名系统"><a href="#域名系统" class="headerlink" title="域名系统"></a>域名系统</h2><h3 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h3><p><code>Domain Name System</code></p>
<blockquote>
<p>利用DNS, 可以将域名解析成对应的IP地址.</p>
</blockquote>
<blockquote>
<p>DNS可以基于UDP协议，也可以基于TCP协议, 服务器占用53端口.</p>
</blockquote>
]]></content>
      <categories>
        <category>网络</category>
        <category>应用层</category>
      </categories>
      <tags>
        <tag>网络 应用层</tag>
      </tags>
  </entry>
</search>
